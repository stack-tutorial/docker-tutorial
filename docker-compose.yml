version: "3.7"

services:
  gitea:
    image: gitea/gitea:1.11
    container_name: gitea
    hostname: gitea
    ports:
      - 22:22/tcp
    environment:
      - USER_UID=1000
      - USER_GID=1000
    restart: always
    volumes:
      - ${VOLUME_PREFIX}/gitea:/data
    networks:
      - default
    labels:
      - traefik.http.routers.gitea.rule=Host(`git${HOST_DOMAIN}`)
      - traefik.http.routers.gitea.entrypoints=websecure
      - traefik.http.routers.gitea.tls=true
      - traefik.http.routers.gitea.tls.certresolver=leresolver
      - traefik.http.services=gitea
      - traefik.http.services.gitea.loadbalancer.server.port=3000
  gogs:
    image: gogs/gogs:latest
    container_name: gogs
    hostname: gogs
    environment:
      - USER_UID=1000
      - USER_GID=1000
    restart: always
    volumes:
      - ${VOLUME_PREFIX}/gogs:/data
    networks:
      - default
    labels:
      - traefik.http.routers.gogs.rule=Host(`gogs${HOST_DOMAIN}`)
      - traefik.http.routers.gogs.entrypoints=websecure
      - traefik.http.routers.gogs.tls=true
      - traefik.http.routers.gogs.tls.certresolver=leresolver
      - traefik.http.services=gogs
      - traefik.http.services.gogs.loadbalancer.server.port=3000
  httpbin:
    image: kennethreitz/httpbin:latest
    container_name: httpbin
    hostname: httpbin
    restart: always
    networks:
      - default
    labels:
      - traefik.http.routers.httpbin.rule=Host(`httpbin${HOST_DOMAIN}`)
      - traefik.http.routers.httpbin.entrypoints=websecure
      - traefik.http.routers.httpbin.tls=true
      - traefik.http.routers.httpbin.tls.certresolver=leresolver
      - traefik.http.services=httpbin
      - traefik.http.services.httpbin.loadbalancer.server.port=80
  proxy:
    image: proxy:dev
    container_name: proxy
    hostname: proxy
    restart: always
    build: $PWD/forword-proxy
    networks:
      - default
    ports:
      - 3128:3128
    environment:
      - USERNAME=${USERNAME}
      - PASSWORD=${SECRETPERSONAL}
    labels:
      - traefik.enable=false
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    hostname: phpmyadmin
    restart: always
    networks:
      - default
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=mysql${HOST_DOMAIN}
      - PMA_USER=root
      - PMA_PASSWORD=${SECRETPERSONAL}
    labels:
      - traefik.http.routers.phpmyadmin.rule=Host(`phpmyadmin${HOST_DOMAIN}`)
      - traefik.http.routers.phpmyadmin.entrypoints=websecure
      - traefik.http.routers.phpmyadmin.tls=true
      - traefik.http.routers.phpmyadmin.tls.certresolver=leresolver
      - traefik.http.services=phpmyadmin
      - traefik.http.services.phpmyadmin.loadbalancer.server.port=80
  filebrowser:
    image: filebrowser/filebrowser:v2
    container_name: filebrowser
    hostname: filebrowser
    restart: always
    networks:
      - default
    volumes:
      - ${VOLUME_PREFIX}/filebrowser:/srv
    labels:
      - traefik.http.routers.filebrowser.rule=Host(`files${HOST_DOMAIN}`)
      - traefik.http.routers.filebrowser.entrypoints=websecure
      - traefik.http.routers.filebrowser.tls=true
      - traefik.http.routers.filebrowser.tls.certresolver=leresolver
      - traefik.http.services=filebrowser
      - traefik.http.services.filebrowser.loadbalancer.server.port=80
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: jupyter
    hostname: jupyter
    restart: always
    networks:
      - default
    volumes:
      - ${VOLUME_PREFIX}/jupyter:/home/jovyan/work
    labels:
      - traefik.http.routers.jupyter.rule=Host(`jupyter${HOST_DOMAIN}`)
      - traefik.http.routers.jupyter.entrypoints=websecure
      - traefik.http.routers.jupyter.tls=true
      - traefik.http.routers.jupyter.tls.certresolver=leresolver
      - traefik.http.services=jupyter
      - traefik.http.services.jupyter.loadbalancer.server.port=8888
  mongo:
    image: mongo:4
    container_name: mongo
    restart: always
    hostname: mongodb
    command: mongod --auth --nojournal
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_DATABASE=${DATABASE_NAME}
      - MONGO_INITDB_ROOT_USERNAME=${USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${SECRETPERSONAL}
    volumes:
      - ${VOLUME_PREFIX}/mongo:/data/db
    labels:
      - traefik.tcp.routers.mongo.rule=HostSNI(`mongo${HOST_DOMAIN}`)
  mysql:
    image: mysql:8
    container_name: mysql
    restart: always
    hostname: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${SECRETPERSONAL}
      - MYSQL_USER=${USERNAME}
      - MYSQL_PASSWORD=${SECRETPERSONAL}
      - MYSQL_DATABASE=${DATABASE_NAME}
    volumes:
      - ${VOLUME_PREFIX}/mysql:/var/lib/mysql
    labels:
      - traefik.tcp.routers.mysql.rule=HostSNI(`*`)
      - traefik.tcp.routers.mysql.entrypoints=mysql
      - traefik.tcp.routers.mysql.service=mysql-svc
      - traefik.tcp.services.mysql-svc.loadbalancer.server.port=3306
  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    hostname: redis
    command: redis-server --requirepass ${SECRETPERSONAL}
    volumes:
      - ${VOLUME_PREFIX}/redis:/data
    ports:
      - 6379:6379
    labels:
      - traefik.tcp.routers.redis.rule=HostSNI(`redis${HOST_DOMAIN}`)
  postgres:
    image: postgres:alpine
    container_name: postgres
    hostname: postgres
    restart: always
    environment:
      - POSTGRES_USER=${USERNAME}
      - POSTGRES_PASSWORD=${SECRETPERSONAL}
      - POSTGRES_DB=${DATABASE_NAME}
    ports:
      - 5432:5432
    volumes:
      - ${VOLUME_PREFIX}/postgres:/var/lib/postgresql/data
      - ${VOLUME_PREFIX}/key/postgres/server.crt:/var/lib/postgresql/server.crt:ro
      - ${VOLUME_PREFIX}/key/postgres/server.key:/var/lib/postgresql/server.key:ro
    command:
      [
        "postgres",
        "-c",
        "ssl=on",
        "-c",
        "ssl_cert_file=/var/lib/postgresql/server.crt",
        "-c",
        "ssl_key_file=/var/lib/postgresql/server.key",
      ]
    labels:
      - traefik.tcp.routers.postgres.rule=HostSNI(`postgres${HOST_DOMAIN}`)
  influxdb:
    image: influxdb:alpine
    container_name: influxdb
    hostname: influxdb
    restart: always
    environment:
      - INFLUXDB_GRAPHITE_ENABLED=true
      - INFLUXDB_HTTP_AUTH_ENABLED=true
      - INFLUXDB_ADMIN_USER=${USERNAME}
      - INFLUXDB_ADMIN_PASSWORD=${SECRETPERSONAL}
      - INFLUXDB_USER=${USERNAME}-user
      - INFLUXDB_USER_PASSWORD=${SECRETPERSONAL}
      - INFLUXDB_DB=${DATABASE_NAME}
    ports:
      - 2003:2003
    volumes:
      - ${VOLUME_PREFIX}/influxdb:/var/lib/influxdb
    networks:
      - default
    labels:
      - traefik.http.routers.influxdb.rule=Host(`influxdb${HOST_DOMAIN}`)
      - traefik.http.routers.influxdb.entrypoints=websecure
      - traefik.http.routers.influxdb.tls=true
      - traefik.http.routers.influxdb.tls.certresolver=leresolver
      - traefik.http.services=influxdb
      - traefik.http.services.influxdb.loadbalancer.server.port=8086
      - traefik.tcp.routers.influxdb.rule=HostSNI(`influxdb${HOST_DOMAIN}`)
  chronograf:
    image: chronograf:alpine
    container_name: chronograf
    hostname: chronograf
    restart: always
    volumes:
      - ${VOLUME_PREFIX}/chronograf:/var/lib/chronograf
    networks:
      - default
    labels:
      - traefik.http.routers.chronograf.rule=Host(`chronograf${HOST_DOMAIN}`)
      - traefik.http.routers.chronograf.entrypoints=websecure
      - traefik.http.routers.chronograf.tls=true
      - traefik.http.routers.chronograf.tls.certresolver=leresolver
      - traefik.http.services=chronograf
      - traefik.http.services.chronograf.loadbalancer.server.port=8888
  frps:
    image: docker-tutorial:frps
    build:
      context: frp/frps
      dockerfile: Dockerfile
    container_name: frps
    hostname: frps
    restart: always
    network_mode: host
    labels:
      - traefik.tcp.routers.frps.rule=HostSNI(`frps${HOST_DOMAIN}`)
  frpc:
    image: docker-tutorial:frpc
    build:
      context: frp/frps
      dockerfile: Dockerfile
    container_name: frpc
    hostname: frpc
    restart: always
    network_mode: host
    volumes:
      - ./frp/frpc/frpc.ini:/app/frpc.ini
    labels:
      - traefik.enable=false
  netdata:
    image: netdata/netdata:latest
    container_name: netdata
    restart: always
    hostname: netdata
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - default
    labels:
      - traefik.http.routers.netdata.rule=Host(`netdata${HOST_DOMAIN}`)
      - traefik.http.routers.netdata.entrypoints=websecure
      - traefik.http.routers.netdata.tls=true
      - traefik.http.routers.netdata.tls.certresolver=leresolver
      - traefik.http.services=netdata
      - traefik.http.services.netdata.loadbalancer.server.port=19999
  shadowsocks-proxy:
    image: shadowsocks-proxy:dev
    container_name: shadowsocks-proxy
    hostname: shadowsocks-proxy
    restart: always
    build: $PWD/shadowsocks-proxy
    ports:
      - ${SHADOWSOCKS_PORT}:${SHADOWSOCKS_PORT}
    labels:
      - traefik.tcp.routers.ssproxy.rule=HostSNI(`ss${HOST_DOMAIN}`)
  shadowsocks:
    image: shadowsocks/shadowsocks-libev:latest
    container_name: shadowsocks
    restart: always
    hostname: shadowsocks
    environment:
      - METHOD=chacha20-ietf-poly1305
      - PASSWORD=${SECRETPERSONAL}
    ports:
      - ${SHADOWSOCKS_PORT}:8388
    labels:
      traefik.enable: false
networks:
  default:
    external:
      name: ${DOCKER_NETWORK:-webproxy}
